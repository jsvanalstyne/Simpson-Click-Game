{"version":3,"sources":["components/Jumbo/index.js","components/FriendCard/index.js","components/Nav/index.js","components/Footer/index.js","App.js","index.js"],"names":["Jumbo","props","className","style","backgroundImage","children","FunCard","onClick","handleClick","id","key","src","url","alt","Nav","href","start","score","topscore","Footer","App","state","character","alreadyClicked","setState","concat","includes","sort","a","b","Math","random","game","this","map","characters","clicked","Component","ReactDOM","render","document","getElementById"],"mappings":"y6BAWeA,MARf,SAAeC,GACb,OACE,yBAAKC,UAAU,oBAAoBC,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAAMG,gBAAf,OACxDH,EAAMI,W,MCQEC,MAXf,SAAiBL,GACb,OAGQ,yBAAKC,UAAU,eAAeK,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,KAAMC,IAAKT,EAAMQ,GAAIA,GAAIR,EAAMQ,GAAIE,IAAKV,EAAMW,IAAKC,IAAI,S,MCezHC,MAnBf,SAAab,GACb,OACI,wBAAIC,UAAU,OACd,wBAAIA,UAAU,YACd,4BAAI,uBAAGA,UAAU,WAAWa,KAAK,KAA7B,iBAEJ,wBAAIb,UAAU,YACb,4BAAKD,EAAMe,QAEZ,wBAAId,UAAU,YACV,sCAAYD,EAAMgB,MAAlB,gBAAsChB,EAAMiB,a,MCArCC,MATf,WACI,OACI,4BAAQjB,UAAU,UACd,yD,OCgEGkB,E,2MA9DbC,MAAQ,CACNJ,MAAO,EACPC,SAAU,EACVI,UAAWA,EACXC,eAAgB,I,EAIlBf,YAAc,SAAAC,GAEZ,EAAKe,SAAS,CAEZD,eAAgB,EAAKF,MAAME,eAAeE,OAAOhB,KAG/C,EAAKY,MAAME,eAAeG,SAASjB,GAC3B,EAAKe,SAAS,CACNP,MAAO,EACPM,eAAgB,MAKlC,EAAKC,SAAS,CAEZP,MAAO,EAAKI,MAAMJ,MAAQ,EAE1BK,UAAWA,EAAUK,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,cAG5D,EAAKV,MAAMJ,OAAS,EAAKI,MAAMH,UAC7B,EAAKM,SAAS,CACdN,SAAU,EAAKG,MAAMH,SAAW,M,wEAKhC,IAAD,OAEP,OACE,6BACE,kBAAC,EAAD,CAAKc,KAAK,cAAchB,MAAM,6BAA6BC,MAAOgB,KAAKZ,MAAMJ,MAAOC,SAAUe,KAAKZ,MAAMH,WAEzG,kBAAC,EAAD,CAAOd,gBAAgB,iDACrB,4CACA,yGAEF,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACZ+B,KAAKZ,MAAMC,UAAUY,KAAI,SAAAC,GAAU,OAClC,kBAAC,EAAD,CAAS1B,GAAI0B,EAAW1B,GAAIG,IAAKuB,EAAWvB,IAAKwB,QAASD,EAAWC,QAAS5B,YAAa,EAAKA,mBAKtG,kBAAC,EAAD,W,GAxDU6B,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2eff1056.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbo(props) {\n  return (\n    <div className=\"jumbo text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Jumbo;","import React from \"react\";\nimport \"./style.css\"\n\nfunction FunCard(props) {\n    return (\n       \n            // Image with onclick function and passing the id of the image into the function. \n            <img className=\"images col-2\" onClick={() => props.handleClick(props.id)}  key={props.id} id={props.id} src={props.url} alt=\"...\" />\n     \n           \n            )\n        \n     }\n        \nexport default FunCard","import React from \"react\";\nimport \"./style.css\"\n\nfunction Nav(props){\nreturn(\n    <ul className=\"nav\">\n    <li className=\"nav-item\">\n    <h1><a className=\"nav-link\" href=\"/\">Clicky Game</a></h1>\n    </li>\n    <li className=\"nav-item\">\n     <h1>{props.start}</h1>\n    </li>\n    <li className=\"nav-item\">\n        <h2>Score: {props.score} | Topscore: {props.topscore}</h2>\n      \n    </li>\n    \n  </ul>\n)\n\n\n}\nexport default Nav;","import React from \"react\";\nimport \"./style.css\"\n\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <span>&copy;Clicky Game 2020!</span>\n        </footer>\n    );\n}\n\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Jumbo from \"./components/Jumbo\";\nimport FunCard from \"./components/FriendCard\"\nimport Nav from \"./components/Nav\";\nimport Footer from \"./components/Footer\"\nimport character from \"./simpson.json\";\n\nclass App extends Component {\n  state = {\n    score: 0,\n    topscore: 0,\n    character: character,\n    alreadyClicked: []\n\n  }\n  // ------------------------Main Game Function---------------------------------\n  handleClick = id => {\n\n    this.setState({\n      // put the card id into the already clicked array\n      alreadyClicked: this.state.alreadyClicked.concat(id)\n    })\n    // Check to see if the alreadyClicked array includes the current card id, if it does then set the score to zero and empty already clicked array\n    if (this.state.alreadyClicked.includes(id)) {\n                this.setState({\n                        score: 0,\n                        alreadyClicked: []\n            })\n    }\n    else {\n      // if it does not include the card, increase the score by 1. \n      this.setState({\n        // increase the score by one for a correct choosing\n        score: this.state.score + 1,\n        // randomly sorts the array\n        character: character.sort(function (a, b) { return 0.5 - Math.random() })\n      })\n      // check to see if the current score is greater than the top score, if it is then replaced the topscore with the current score. \n      if (this.state.score >= this.state.topscore) {\n            this.setState({\n            topscore: this.state.topscore + 1\n            })\n      }\n    }\n  }\n  render() {\n\n    return (\n      <div>\n        <Nav game=\"Clicky Game\" start=\"Click on an image to begin\" score={this.state.score} topscore={this.state.topscore}></Nav>\n\n        <Jumbo backgroundImage=\"https://www.simpsonsworld.com/SimpsonsEOL.png\">\n          <h1>Clicky Game!</h1>\n          <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n        </Jumbo>\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.character.map(characters => (\n              <FunCard id={characters.id} url={characters.url} clicked={characters.clicked} handleClick={this.handleClick}\n              ></FunCard>\n            ))}\n          </div>\n        </div>\n        <Footer></Footer>\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}